<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bin&#39;s Blog</title>
  <subtitle>Good Lucky.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liaobinbin.com/"/>
  <updated>2017-06-27T16:31:16.000Z</updated>
  <id>https://liaobinbin.com/</id>
  
  <author>
    <name>Bob Liao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在MAC下使用proxychains为git加速</title>
    <link href="https://liaobinbin.com/2017/06/28/mac-use-proxychains-for-git.html"/>
    <id>https://liaobinbin.com/2017/06/28/mac-use-proxychains-for-git.html</id>
    <published>2017-06-27T16:00:47.000Z</published>
    <updated>2017-06-27T16:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Note: 需要先在Mac上安装<code>shadowsocksX-NG</code>，并且配置自己的<code>shadowsocks</code>服务，最好是可以同时配置<code>kcptun</code>服务，这样的话可以得到更快的速度。<br><a id="more"></a><br>首先安装使用<code>brew</code>进行安装<code>proxychains-ng</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install proxychains-ng</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: 其实这个安装只是安装到一个容器里面</p>
</blockquote>
<p>安装完成后需要修改<code>proxychains-ng</code>的配置文件来设置代理端口</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/etc/proxychains.conf</div><div class="line"><span class="comment"># 修改最后一行</span></div><div class="line">socks5 127.0.0.1 1086</div><div class="line"><span class="comment"># 协议 监听地址  监听端口</span></div><div class="line"><span class="comment"># 这里可以选用`http`协议或者`socks`协议</span></div></pre></td></tr></table></figure>
<p>如果需要让命令行里面的某个程序在无需任何配置的情况直接走代理，直接在原来的命令前面加<code>proxychains4</code>就可以。(我记的linux下命令好像是<code>proxychains</code>来着,不过没差，反正tab能补全。)</p>
<p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains4 git <span class="built_in">clone</span> xxxx.git</div></pre></td></tr></table></figure></p>
<p>如果想让某个<code>app</code>走代理路线，可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains4 open -a QQ.app</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Note: 当然一些app自带proxy设置的，例如<code>telegram-desktop</code>就可以直接在设置中填写代理地址</p>
</blockquote>
<p>当你这个命令使用的多的时候，你可能会觉得这个单词比较长，达不到你想要的装逼速度，于是这时候你可以使用<code>shell</code>里面的别名功能。<br>以<code>zsh</code>为例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ~/.zshrc</div><div class="line"><span class="comment"># 在最后一行增加(当然你想在哪行增加都可以。)</span></div><div class="line"><span class="built_in">alias</span> DL=<span class="string">"proxychains"</span></div></pre></td></tr></table></figure>
<p>这样每次就直接输入两个大写字母就可以快速的进行使用代理了。</p>
<blockquote>
<p>小技巧：如果你先打了<code>DL</code>或者<code>proxychains4</code>这命令以后，你继续写剩余的命令的话，你会发现剩余的命令无法使用补全功能了。所以我一般是使用正常书写其他命里的方式。写完后再按下键盘上的<code>home</code>键，它可以快速的使光标到达命令的最前面，然后再加上<code>DL</code>，这样就比较便捷，Mac下的话使用<code>Iterm2</code> 好像使用设置快捷键也可以自动增加你想要的命令在头部，但是我个人觉得会增加学习成本，因为<code>home</code>键在linux下面也是通用的。</p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>因为Mac的<code>sip</code>系统保护机制，所以这个需要关闭，实际上我后面想了一下，不关闭好像也可以。有尝试过的朋友可以告诉我一下。</p>
<p>对于使用<code>git</code>命令走代理的时候，经常会出现一个签名验证失败的问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[proxychains] DLL init: proxychains-ng 4.11</div><div class="line">  dyld: warning: could not load inserted library <span class="string">'/usr/local/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib'</span> into library validated process because no suitable image found.  Did find:</div><div class="line">  	/usr/<span class="built_in">local</span>/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib: code signing blocked mmap() of <span class="string">'/usr/local/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib'</span></div><div class="line">  dyld: warning: could not load inserted library <span class="string">'/usr/local/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib'</span> into library validated process because no suitable image found.  Did find:</div><div class="line">  	/usr/<span class="built_in">local</span>/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib: code signing blocked mmap() of <span class="string">'/usr/local/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib'</span></div><div class="line">  dyld: warning: could not load inserted library <span class="string">'/usr/local/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib'</span> into library validated process because no suitable image found.  Did find:</div><div class="line">  	/usr/<span class="built_in">local</span>/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib: code signing blocked mmap() of <span class="string">'/usr/local/Cellar/proxychains-ng/4.11/lib/libproxychains4.dylib'</span></div></pre></td></tr></table></figure></p>
<p>大概就是这样的一个错误，经过我的总结，我发现就是<code>porxychains</code>本身只是一个容器的应用，是没有权限去访问系统目录的。所以由此解决方法可以想到两个。<br>一个是把你需要使用的命令变成可供普通访问的权限。<br>类似这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install git</div></pre></td></tr></table></figure></p>
<p>这里直接用一个<code>「容器版git」</code>来替代系统git命令，重启当前终端就可以正常使用并且不再报错。</p>
<p>第二个方案方法就赋予<code>proxychains</code>权限。<br>由于我感觉这个方法没有第一个方法简单，所以我没多做研究。</p>
<h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>如有不正确的地方请各位大佬指出，小弟虚心请教。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Note: 需要先在Mac上安装&lt;code&gt;shadowsocksX-NG&lt;/code&gt;，并且配置自己的&lt;code&gt;shadowsocks&lt;/code&gt;服务，最好是可以同时配置&lt;code&gt;kcptun&lt;/code&gt;服务，这样的话可以得到更快的速度。&lt;br&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://liaobinbin.com/tags/Mac/"/>
    
      <category term="git" scheme="https://liaobinbin.com/tags/git/"/>
    
      <category term="proxychains" scheme="https://liaobinbin.com/tags/proxychains/"/>
    
  </entry>
  
  <entry>
    <title>Js对于数组去重提高效率一些心得</title>
    <link href="https://liaobinbin.com/2017/06/19/javascript-array-removal-is-repeated.html"/>
    <id>https://liaobinbin.com/2017/06/19/javascript-array-removal-is-repeated.html</id>
    <published>2017-06-19T13:20:08.000Z</published>
    <updated>2017-06-27T15:54:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在找工作，好几次面试都问过数组去重的问题。虽然问的都不一样，但是核心思想是没有变的。</p>
<h2 id="第一种是比较常规的方法"><a href="#第一种是比较常规的方法" class="headerlink" title="第一种是比较常规的方法"></a>第一种是比较常规的方法</h2><p><strong>思路：</strong></p>
<ol>
<li>构建一个新的数组存放结果</li>
<li>for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比</li>
<li>若结果数组中没有该元素，则存到结果数组中<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> res = [<span class="keyword">this</span>[<span class="number">0</span>]];</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++)&#123;</div><div class="line">  <span class="keyword">var</span> repeat = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; res.length; j++)&#123;</div><div class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>[i] == res[j])&#123;</div><div class="line">    repeat = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(!repeat)&#123;</div><div class="line">   res.push(<span class="keyword">this</span>[i]);</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line">alert(arr.unique1());</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第二种方法比上面的方法效率要高"><a href="#第二种方法比上面的方法效率要高" class="headerlink" title="第二种方法比上面的方法效率要高"></a>第二种方法比上面的方法效率要高</h2><p><strong>思路：</strong></p>
<ol>
<li>先将原数组进行排序</li>
<li>检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置</li>
<li>如果不相同，则将该元素存入结果数组中</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">this</span>.sort(); <span class="comment">//先排序</span></div><div class="line"> <span class="keyword">var</span> res = [<span class="keyword">this</span>[<span class="number">0</span>]];</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++)&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>[i] !== res[res.length - <span class="number">1</span>])&#123;</div><div class="line">   res.push(<span class="keyword">this</span>[i]);</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line">alert(arr.unique2());</div></pre></td></tr></table></figure>
<p>第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。</p>
<h2 id="第三种方法（推荐使用）"><a href="#第三种方法（推荐使用）" class="headerlink" title="第三种方法（推荐使用）"></a>第三种方法（推荐使用）</h2><p><strong>思路：</strong></p>
<ol>
<li>创建一个新的数组存放结果</li>
<li>创建一个空对象</li>
<li>for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。</li>
</ol>
<blockquote>
<p><strong>说明</strong>：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> res = [];</div><div class="line"> <span class="keyword">var</span> json = &#123;&#125;;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++)&#123;</div><div class="line">  <span class="keyword">if</span>(!json[<span class="keyword">this</span>[i]])&#123;</div><div class="line">   res.push(<span class="keyword">this</span>[i]);</div><div class="line">   json[<span class="keyword">this</span>[i]] = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">112</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="string">'你好'</span>,<span class="number">112</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="string">'你好'</span>,<span class="string">'str'</span>,<span class="string">'str1'</span>];</div><div class="line">alert(arr.unique3());</div></pre></td></tr></table></figure>
<p>下面我遇到的面试题</p>
<p><em>注释掉的是常规写法</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// function test(str) &#123;</span></div><div class="line"><span class="comment">//     var arr = str.split("");</span></div><div class="line"><span class="comment">//     var newStr = ""; </span></div><div class="line"><span class="comment">//     for(var i=0; i&lt; arr.length; i++)&#123;</span></div><div class="line"><span class="comment">//         var count = 0;</span></div><div class="line"><span class="comment">//         for(var n=0; n&lt;arr.length; n++)&#123;</span></div><div class="line"><span class="comment">//             if(arr[n] == arr[i])&#123;</span></div><div class="line"><span class="comment">//                 count ++;</span></div><div class="line"><span class="comment">//             &#125;</span></div><div class="line"><span class="comment">//         &#125;</span></div><div class="line"><span class="comment">//         newStr += count &gt;= 2 ? ")" : "(";</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">//     return newStr</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">""</span>);</div><div class="line">    <span class="keyword">var</span> result = [], hash = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,elem; (elem = arr[i]) != <span class="literal">null</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!hash[elem])&#123;</div><div class="line">            result.push(elem);</div><div class="line">            hash[elem] = <span class="number">1</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            hash[elem] ++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> n=<span class="number">0</span>,elem; (elem = result[n]) != <span class="literal">null</span> ; n++)&#123;</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(result[n], <span class="string">"g"</span>);</div><div class="line">        hash[elem] &gt; <span class="number">1</span> ? str = str.replace(reg, <span class="string">")"</span>) : str = str.replace(reg, <span class="string">"("</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(test(<span class="string">'abcb'</span>));</div></pre></td></tr></table></figure></p>
<p>这个是帮朋友写的一个题</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// function change(str, key)&#123;</span></div><div class="line"><span class="comment">//     str = str.split('');</span></div><div class="line"><span class="comment">//     key = key.split('');</span></div><div class="line"><span class="comment">//     for(var i=0; i&lt;str.length; i++)&#123;</span></div><div class="line"><span class="comment">//         for(var n=0; n&lt;key.length; n++)&#123;</span></div><div class="line"><span class="comment">//             if(str[i] === key[n])&#123;</span></div><div class="line"><span class="comment">//                 str.splice(i, 1);</span></div><div class="line"><span class="comment">//                 break;</span></div><div class="line"><span class="comment">//             &#125; else &#123;</span></div><div class="line"><span class="comment">//                 continue;</span></div><div class="line"><span class="comment">//             &#125;</span></div><div class="line"><span class="comment">//         &#125;</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">//     return str.join("");</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">str, key</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">''</span>);</div><div class="line">    key = key.split(<span class="string">''</span>);</div><div class="line">    <span class="keyword">var</span> hash = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,elem; (elem = key[i]) != <span class="literal">null</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!hash[elem]) hash[elem] = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> n=<span class="number">0</span>, elem; (elem = arr[n]) != <span class="literal">null</span>; n++)&#123;</div><div class="line">        <span class="keyword">if</span>(hash[elem]) arr.splice(n,<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr.join(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(change(<span class="string">"they are students "</span>, <span class="string">"aeous"</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在找工作，好几次面试都问过数组去重的问题。虽然问的都不一样，但是核心思想是没有变的。&lt;/p&gt;
&lt;h2 id=&quot;第一种是比较常规的方法&quot;&gt;&lt;a href=&quot;#第一种是比较常规的方法&quot; class=&quot;headerlink&quot; title=&quot;第一种是比较常规的方法&quot;&gt;&lt;/a&gt;第一种是比较常规的方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建一个新的数组存放结果&lt;/li&gt;
&lt;li&gt;for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比&lt;/li&gt;
&lt;li&gt;若结果数组中没有该元素，则存到结果数组中
    
    </summary>
    
      <category term="前端" scheme="https://liaobinbin.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavasSript" scheme="https://liaobinbin.com/tags/JavasSript/"/>
    
      <category term="Array" scheme="https://liaobinbin.com/tags/Array/"/>
    
      <category term="Repeat" scheme="https://liaobinbin.com/tags/Repeat/"/>
    
  </entry>
  
  <entry>
    <title>19个JavaScript编码中的简写语法</title>
    <link href="https://liaobinbin.com/2017/06/18/shorthand-javascript-techniques.html"/>
    <id>https://liaobinbin.com/2017/06/18/shorthand-javascript-techniques.html</id>
    <published>2017-06-18T12:57:16.000Z</published>
    <updated>2017-06-27T15:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>阅读此文章对于任何使用JavaScript的开发人员来说都是非常有必要的</strong>。我将这篇文章作为我使用JavaScript简化语法编码参考的重要来源已经很多年</p>
<blockquote>
<p><strong>2017年6月14日</strong>:本文基于ES6语法更新添加新的简写技巧。如果您想了解有关ES6更改的更多信息，<a href="https://www.sitepoint.com/premium/screencasts/a-look-into-es2016" target="_blank" rel="external">查看ES6相关内容</a>。<br><a id="more"></a></p>
<h1 id="1-The-Ternary-Operator-三元运算符"><a href="#1-The-Ternary-Operator-三元运算符" class="headerlink" title="1. The Ternary Operator(三元运算符)"></a>1. The Ternary Operator(三元运算符)</h1></blockquote>
<p>当你想在一行中编写<code>if..else</code>语句时，这将会是一个非常好的方式。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> x = <span class="number">20</span>;</div><div class="line"><span class="keyword">let</span> big;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>) &#123;</div><div class="line">    big = <span class="literal">true</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    big = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> big = x &gt; <span class="number">10</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<p>你也可以嵌套<code>if</code>语句像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> big = x &gt; <span class="number">10</span> ? <span class="string">" greater 10"</span> : x &lt; <span class="number">5</span> ? <span class="string">"less 5"</span> : <span class="string">"between 5 and 10"</span>;</div></pre></td></tr></table></figure>
<h1 id="2-Short-circuit-Evaluation-Shorthand-空值or未定义检查"><a href="#2-Short-circuit-Evaluation-Shorthand-空值or未定义检查" class="headerlink" title="2. Short-circuit Evaluation Shorthand(空值or未定义检查)"></a>2. Short-circuit Evaluation Shorthand(空值or未定义检查)</h1><p>将变量值分配给另一个变量时，可能需要确保源变量不为<code>null</code>，<code>undefined</code>或为<code>&#39;&#39;</code>。你可以使用多个条件来一个很长的<code>if</code>语句，也可以使用短路赋值。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (variable1 !== <span class="literal">null</span> || variable1 !== <span class="literal">undefined</span> || variable1 !== <span class="string">''</span>) &#123;</div><div class="line">     <span class="keyword">let</span> variable2 = variable1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> variable2 = variable1  || <span class="string">'new'</span>;</div></pre></td></tr></table></figure>
<p>不相信我？你可以自己测试（把下面的代码粘贴在<a href="https://es6console.com/" target="_blank" rel="external">es6console</a>)：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable1;</div><div class="line"><span class="keyword">let</span> variable2 = variable1  || <span class="string">''</span>;</div><div class="line"><span class="built_in">console</span>.log(variable2 === <span class="string">''</span>); <span class="comment">// prints true</span></div><div class="line"></div><div class="line">variable1 = <span class="string">'foo'</span>;</div><div class="line">variable2 = variable1  || <span class="string">''</span>;</div><div class="line"><span class="built_in">console</span>.log(variable2); <span class="comment">// prints foo</span></div></pre></td></tr></table></figure>
<h1 id="3-Declaring-Variables-Shorthand-声明变量"><a href="#3-Declaring-Variables-Shorthand-声明变量" class="headerlink" title="3. Declaring Variables Shorthand(声明变量)"></a>3. Declaring Variables Shorthand(声明变量)</h1><p>在你的函数开始时声明变量复制是一个好习惯。这种简写方法可以在同时声明多分变量时节省大量的时间和空间。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x;</div><div class="line"><span class="keyword">let</span> y;</div><div class="line"><span class="keyword">let</span> z = <span class="number">3</span>;</div></pre></td></tr></table></figure>
<p>简写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x, y, z=<span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<h1 id="4-If-Presence-Shorthand-判断是否存在"><a href="#4-If-Presence-Shorthand-判断是否存在" class="headerlink" title="4. If Presence Shorthand(判断是否存在)"></a>4. If Presence Shorthand(判断是否存在)</h1><p>这可能是微不足道的，但值得一提。当正在进行『如果检查』的时候，分配运算符有时可以省略。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (likeJavaScript === <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (likeJavaScript)</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note</strong>:这两个例子并不是完全相同，只要<code>likeJavaScript</code>是一个真值，简版的逻辑就会通过。</p>
</blockquote>
<p>这是另外一个例子。如果『a』不等于<code>true</code>，则做某事。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a;</div><div class="line"><span class="keyword">if</span> ( a !== <span class="literal">true</span> ) &#123;</div><div class="line"><span class="comment">// do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a;</div><div class="line"><span class="keyword">if</span> ( !a ) &#123;</div><div class="line"><span class="comment">// do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-JavaScript-for-Loop-Shorthand-JS循环"><a href="#5-JavaScript-for-Loop-Shorthand-JS循环" class="headerlink" title="5. JavaScript for Loop Shorthand(JS循环)"></a>5. JavaScript for Loop Shorthand(JS循环)</h1><p>这个小提示是非常有用的，如果你想要纯粹的原生<code>JavaScript</code>，而不是依赖外部的库，例如<code>jQuery</code>或者<code>loadsh</code>。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allImgs.length; i++)</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> allImgs)</div></pre></td></tr></table></figure>
<p><code>Array.forEach</code> 简化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a["</span> + index + <span class="string">"] = "</span> + element);</div><div class="line">&#125;</div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(logArrayElements);</div><div class="line"><span class="comment">// logs:</span></div><div class="line"><span class="comment">// a[0] = 2</span></div><div class="line"><span class="comment">// a[1] = 5</span></div><div class="line"><span class="comment">// a[2] = 9</span></div></pre></td></tr></table></figure>
<h1 id="6-Short-circuit-Evaluation-短路赋值"><a href="#6-Short-circuit-Evaluation-短路赋值" class="headerlink" title="6. Short-circuit Evaluation(短路赋值)"></a>6. Short-circuit Evaluation(短路赋值)</h1><p>如果预期的参数为<code>null</code>或<code>undefined</code>，则不用写六行代码来分配一个默认值，所以我们可以简单地使用一个短路逻辑运算符并用一行代码来完成通同样的事情。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dbHost;</div><div class="line"><span class="keyword">if</span> (process.env.DB_HOST) &#123;</div><div class="line">  dbHost = process.env.DB_HOST;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  dbHost = <span class="string">'localhost'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> dbHost = process.env.DB_HOST || <span class="string">'localhost'</span>;</div></pre></td></tr></table></figure>
<h1 id="7-Decimal-base-exponents-十进制基数指数"><a href="#7-Decimal-base-exponents-十进制基数指数" class="headerlink" title="7. Decimal base exponents(十进制基数指数)"></a>7. Decimal base exponents(十进制基数指数)</h1><p>你可能已经看过这个了。它本质上是一个花哨的方式来编写没有尾随<code>0</code>的数字。例如<code>1e7</code>基本上意味着是<code>1</code>,随后是<code>7</code>个零。它表示一个十进制基数（在JavaScript作为浮点型解释）等于10,000,000。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e7</span>; i++) &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// All the below will evaluate to true</span></div><div class="line"><span class="number">1e0</span> === <span class="number">1</span>;</div><div class="line"><span class="number">1e1</span> === <span class="number">10</span>;</div><div class="line"><span class="number">1e2</span> === <span class="number">100</span>;</div><div class="line"><span class="number">1e3</span> === <span class="number">1000</span>;</div><div class="line"><span class="number">1e4</span> === <span class="number">10000</span>;</div><div class="line"><span class="number">1e5</span> === <span class="number">100000</span>;</div></pre></td></tr></table></figure>
<h1 id="8-Object-Property-Shorthand-对象属性"><a href="#8-Object-Property-Shorthand-对象属性" class="headerlink" title="8. Object Property Shorthand(对象属性)"></a>8. Object Property Shorthand(对象属性)</h1><p>在<code>JavaScript</code>中定义对象字面量变得更加容易。ES6为对象分配属性提供了一种跟简单的方法。如果属性名称和值名称相同，则可以利用简写符号。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:x, <span class="attr">y</span>:y &#125;;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123; x, y &#125;;</div></pre></td></tr></table></figure>
<h1 id="9-Arrow-Functions-Shorthand-箭头函数"><a href="#9-Arrow-Functions-Shorthand-箭头函数" class="headerlink" title="9. Arrow Functions Shorthand(箭头函数)"></a>9. Arrow Functions Shorthand(箭头函数)</h1><p>传统的函数易于简单的形式读取和书写，但是一旦你将其嵌套在其他函数调用中，它们往往会变得有点冗长且令人困惑。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>)</div><div class="line">&#125;, <span class="number">2000</span>);</div><div class="line"></div><div class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sayHello = <span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>), <span class="number">2000</span>);</div><div class="line"></div><div class="line">list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item));</div></pre></td></tr></table></figure>
<h1 id="10-Implicit-Return-Shorthand-隐式Return"><a href="#10-Implicit-Return-Shorthand-隐式Return" class="headerlink" title="10. Implicit Return Shorthand(隐式Return)"></a>10. Implicit Return Shorthand(隐式Return)</h1><p><code>Return</code>是我们经常使用的返回函数的最终结果的关键字。一个单一语句的箭头函数将隐式地返回结果的值（该函数必需省略大括号<code>{}</code>，以省略<code>return</code>关键字）。</p>
<p>要返回多行语句（例如对象文本），必须使用<code>()</code>而不是<code>{}</code>来包裹函数体。这确保代码被执行为单个语句。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcCircumference</span>(<span class="params">diameter</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * diameter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">calcCircumference = <span class="function"><span class="params">diameter</span> =&gt;</span> (</div><div class="line">  <span class="built_in">Math</span>.PI * diameter;</div><div class="line">)</div></pre></td></tr></table></figure>
<h1 id="11-Default-Parameter-Values-默认参数值"><a href="#11-Default-Parameter-Values-默认参数值" class="headerlink" title="11. Default Parameter Values(默认参数值)"></a>11. Default Parameter Values(默认参数值)</h1><p>你可以使用<code>if</code>语句定义函数参数的默认值。在ES6中，你可以在函数声明中定义默认值。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">l, w, h</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (w === <span class="literal">undefined</span>)</div><div class="line">    w = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span> (h === <span class="literal">undefined</span>)</div><div class="line">    h = <span class="number">4</span>;</div><div class="line">  <span class="keyword">return</span> l * w * h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">volume = <span class="function">(<span class="params">l, w = <span class="number">3</span>, h = <span class="number">4</span> </span>) =&gt;</span> (l * w * h);</div><div class="line"></div><div class="line">volume(<span class="number">2</span>) <span class="comment">//output: 24</span></div></pre></td></tr></table></figure>
<h1 id="12-Template-Literals-模板文字"><a href="#12-Template-Literals-模板文字" class="headerlink" title="12. Template Literals(模板文字)"></a>12. Template Literals(模板文字)</h1><p>你不厌倦使用<code>+</code>将多个变量连接成一个字符串吗？这不是一个更容易的方式吗？如果你能试用ES6，那么你就是幸运的。所有你需要做的就是使用 <code>` </code> 符号，和<code>${}</code>来包含你的变量。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> welcome = <span class="string">'You have logged in as '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> db = <span class="string">'http://'</span> + host + <span class="string">':'</span> + port + <span class="string">'/'</span> + database;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> welcome = <span class="string">`You have logged in as <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> db = <span class="string">`http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>/<span class="subst">$&#123;database&#125;</span>`</span>;</div></pre></td></tr></table></figure>
<h1 id="13-Destructuring-Assignment-Shorthand-解构分配"><a href="#13-Destructuring-Assignment-Shorthand-解构分配" class="headerlink" title="13. Destructuring Assignment Shorthand(解构分配)"></a>13. Destructuring Assignment Shorthand(解构分配)</h1><p>如果你正在使用任何流行的Web框架，那么你将很高兴使用数组或数据以对象文字形式传递组件和API之间的信息。一旦数据对象到达组件，就需要解包它。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> observable = <span class="built_in">require</span>(<span class="string">'mobx/observable'</span>);</div><div class="line"><span class="keyword">const</span> action = <span class="built_in">require</span>(<span class="string">'mobx/action'</span>);</div><div class="line"><span class="keyword">const</span> runInAction = <span class="built_in">require</span>(<span class="string">'mobx/runInAction'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = <span class="keyword">this</span>.props.store;</div><div class="line"><span class="keyword">const</span> form = <span class="keyword">this</span>.props.form;</div><div class="line"><span class="keyword">const</span> loading = <span class="keyword">this</span>.props.loading;</div><div class="line"><span class="keyword">const</span> errors = <span class="keyword">this</span>.props.errors;</div><div class="line"><span class="keyword">const</span> entity = <span class="keyword">this</span>.props.entity;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; observable, action, runInAction &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, entity &#125; = <span class="keyword">this</span>.props;</div></pre></td></tr></table></figure>
<p>你甚至可以分配你自己的变量名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, <span class="attr">entity</span>:contact &#125; = <span class="keyword">this</span>.props;</div></pre></td></tr></table></figure>
<h1 id="14-Multi-line-String-Shorthand-多行字符串"><a href="#14-Multi-line-String-Shorthand-多行字符串" class="headerlink" title="14. Multi-line String Shorthand(多行字符串)"></a>14. Multi-line String Shorthand(多行字符串)</h1><p>如果你发现自己需要在代码中编写多行字符串，那么你将如何编写它：</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> lorem = <span class="string">'Lorem ipsum dolor sit amet, consectetur\n\t'</span></div><div class="line">    + <span class="string">'adipisicing elit, sed do eiusmod tempor incididunt\n\t'</span></div><div class="line">    + <span class="string">'ut labore et dolore magna aliqua. Ut enim ad minim\n\t'</span></div><div class="line">    + <span class="string">'veniam, quis nostrud exercitation ullamco laboris\n\t'</span></div><div class="line">    + <span class="string">'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t'</span></div><div class="line">    + <span class="string">'irure dolor in reprehenderit in voluptate velit esse.\n\t'</span></div></pre></td></tr></table></figure>
<p>但有一个更简单的方案。只需使用反引号。</p>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> lorem = <span class="string">`Lorem ipsum dolor sit amet, consectetur</span></div><div class="line">    adipisicing elit, sed do eiusmod tempor incididunt</div><div class="line">    ut labore et dolore magna aliqua. Ut enim ad minim</div><div class="line">    veniam, quis nostrud exercitation ullamco laboris</div><div class="line">    nisi ut aliquip ex ea commodo consequat. Duis aute</div><div class="line">    irure dolor in reprehenderit in voluptate velit esse.`</div></pre></td></tr></table></figure>
<h1 id="15-Spread-Operator-Shorthand-拓展操作符"><a href="#15-Spread-Operator-Shorthand-拓展操作符" class="headerlink" title="15. Spread Operator Shorthand(拓展操作符)"></a>15. Spread Operator Shorthand(拓展操作符)</h1><p>在ES6中引入的<strong>扩展运算符</strong>有几个用例，使JavaScript代码的使用更有效率和有趣。它可以用于替换某些数组函数。扩展操作符只是一连串的三个点。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// joining arrays</span></div><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>].concat(odd);</div><div class="line"></div><div class="line"><span class="comment">// cloning arrays</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">const</span> arr2 = arr.slice()</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// joining arrays</span></div><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>, ...odd];</div><div class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 2, 4, 6, 1, 3, 5 ]</span></div><div class="line"></div><div class="line"><span class="comment">// cloning arrays</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">const</span> arr2 = [...arr];</div></pre></td></tr></table></figure>
<p>与<code>concat()</code>方法不同，您可以使用扩展运算符在另一个数组的任何位置插入数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>, ...odd, <span class="number">4</span> , <span class="number">6</span>];</div></pre></td></tr></table></figure>
<p>您还可以将扩展运算符与ES6解构符号组合：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; a, b, ...z &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(z) <span class="comment">// &#123; c: 3, d: 4 &#125;</span></div></pre></td></tr></table></figure>
<h1 id="16-Mandatory-Parameter-Shorthand-强制参数"><a href="#16-Mandatory-Parameter-Shorthand-强制参数" class="headerlink" title="16. Mandatory Parameter Shorthand(强制参数)"></a>16. Mandatory Parameter Shorthand(强制参数)</h1><p>默认情况下，JavaScript将函数参数设置为<code>undefined</code>，如果它们未传递值。一些其他语言将会发出警告或错误。要强制执行参数分配，如果<code>undefined</code>，可以使用<code>if</code>语句来抛出错误，或者你可以利用『强制参数简写』的优势。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(bar === <span class="literal">undefined</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mandatory = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo = <span class="function">(<span class="params">bar = mandatory(</span>)) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="17-Array-find-Shorthand-数组的find函数"><a href="#17-Array-find-Shorthand-数组的find函数" class="headerlink" title="17. Array.find Shorthand(数组的find函数)"></a>17. Array.find Shorthand(数组的find函数)</h1><p>如果你有需求在原生JavaScript中编写查找功能，那么你可能已经使用了for循环。在ES6中，引入了一个名为<code>find()</code>的新数组函数。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> pets = [</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Max'</span>&#125;,</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Cat'</span>, <span class="attr">name</span>: <span class="string">'Karl'</span>&#125;,</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Tommy'</span>&#125;,</div><div class="line">]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDog</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;pets.length; ++i) &#123;</div><div class="line">    <span class="keyword">if</span>(pets[i].type === <span class="string">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</div><div class="line">      <span class="keyword">return</span> pets[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pet = pets.find(<span class="function"><span class="params">pet</span> =&gt;</span> pet.type ===<span class="string">'Dog'</span> &amp;&amp; pet.name === <span class="string">'Tommy'</span>);</div><div class="line"><span class="built_in">console</span>.log(pet); <span class="comment">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></div></pre></td></tr></table></figure>
<h1 id="18-Object-key-Shorthand-运用对象的Key"><a href="#18-Object-key-Shorthand-运用对象的Key" class="headerlink" title="18. Object [key] Shorthand(运用对象的Key)"></a>18. Object [key] Shorthand(运用对象的Key)</h1><p>你知道<code>Foo.bar</code>也可以写成<code>Foo [&#39;bar&#39;]</code>吗？起初，似乎没有一个理由，你应该这样写。但是，这个符号为您提供了编写可重用代码的构建块。</p>
<p>思考一个验证函数的简化示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">values</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!values.first)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span>(!values.last)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(validate(&#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>这个功能完成了它的工作。但是，考虑一种情况，您有很多形式需要应用验证但具有不同的字段和规则。构建可以在运行时配置的通用验证函数不是更好吗？</p>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// object validation rules</span></div><div class="line"><span class="keyword">const</span> schema = &#123;</div><div class="line">  <span class="attr">first</span>: &#123;</div><div class="line">    <span class="attr">required</span>:<span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">last</span>: &#123;</div><div class="line">    <span class="attr">required</span>:<span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// universal validation function</span></div><div class="line"><span class="keyword">const</span> validate = <span class="function">(<span class="params">schema, values</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span>(field <span class="keyword">in</span> schema) &#123;</div><div class="line">    <span class="keyword">if</span>(schema[field].required) &#123;</div><div class="line">      <span class="keyword">if</span>(!values[field]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>&#125;)); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>现在我们有一个验证函数，我们可以在所有代码块中重用，而无需为每个函数编写自定义验证函数。</p>
<h1 id="19-Double-Bitwise-NOT-Shorthand"><a href="#19-Double-Bitwise-NOT-Shorthand" class="headerlink" title="19. Double Bitwise NOT Shorthand"></a>19. Double Bitwise NOT Shorthand</h1><p>位运算符是您在初学者JavaScript教程中学到的功能之一，您永远不会在任何地方实现它们。此外，如果您不处理二进制文件，谁想要处理这些零和零。</p>
<p>但是，对于<code>~~</code>，非常实用的用例。你可以使用它作为<code>Math.floor()</code>的替代。它的优点是它执行相同的操作更快。</p>
<p>原版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.floor(<span class="number">4.9</span>) === <span class="number">4</span>  <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>简版：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~<span class="number">4.9</span> === <span class="number">4</span>  <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h1 id="20-Suggest-One-你也来建议一条？"><a href="#20-Suggest-One-你也来建议一条？" class="headerlink" title="20. Suggest One? (你也来建议一条？)"></a>20. Suggest One? (你也来建议一条？)</h1><p>我真的很喜欢这些，并希望找到更多，请留下评论！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;阅读此文章对于任何使用JavaScript的开发人员来说都是非常有必要的&lt;/strong&gt;。我将这篇文章作为我使用JavaScript简化语法编码参考的重要来源已经很多年&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2017年6月14日&lt;/strong&gt;:本文基于ES6语法更新添加新的简写技巧。如果您想了解有关ES6更改的更多信息，&lt;a href=&quot;https://www.sitepoint.com/premium/screencasts/a-look-into-es2016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看ES6相关内容&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://liaobinbin.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://liaobinbin.com/tags/ES6/"/>
    
      <category term="shorthand" scheme="https://liaobinbin.com/tags/shorthand/"/>
    
  </entry>
  
  <entry>
    <title>使用linux系统的ss为局域网的iphone实现网络加速kcptun</title>
    <link href="https://liaobinbin.com/2017/06/14/use-linux-ss-for-my-iphone-of-lan-without-phone-client.html"/>
    <id>https://liaobinbin.com/2017/06/14/use-linux-ss-for-my-iphone-of-lan-without-phone-client.html</id>
    <published>2017-06-13T19:09:51.000Z</published>
    <updated>2017-06-27T15:57:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>折腾这个的原因是因为在IOS下没有支持<code>kcptun</code>加速的ss客户端，而且我这个穷屌丝，买不起可以刷固件的路由器。<br>所以就只有想办法把linux系统中的ss共享到局域网，IOS可以局域网的代理进行加速。实现躺在床上高速看<code>youtube</code>的效果。<br>因为<code>windows</code>的ss客户端已经自带的允许来自局域网的连接的功能，然而Linux的ss却没有此功能。<br>所有只有另寻它径，在网上查找资料就找到了一个名为<code>meow</code>代理工具，可以讲sock5代理转为http代理。<br><a id="more"></a><br>老规矩上<code>gayhub</code>地址：<a href="https://github.com/renzhn/MEOW" target="_blank" rel="external">https://github.com/renzhn/MEOW</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>根据帮助文档，这里我直接执行他所提供的脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L git.io/meowproxy | bash</div></pre></td></tr></table></figure></p>
<p>这里会弹出一个提示框会让你输入安装的绝对路径，前提是该目录存在。<br>我填写的是<code>/home/bob/meow</code>。<br>安装的过程根据网络的因素可能时间会有点长，等待安装完成后。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>可以在安装目录下找到一个可执行文件，使用<code>./MEOW</code>就可以执行。<br>它会自动调用<code>~/.meow/rc</code>这个配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#############################</div><div class="line"># 监听地址，设为0.0.0.0可以监听所有端口，共享给局域网使用</div><div class="line">#############################</div><div class="line">listen = http://0.0.0.0:4411</div><div class="line">#############################</div><div class="line"># 指定二级代理</div><div class="line">#############################</div><div class="line"># 例子：</div><div class="line">#SOCKS5:</div><div class="line">proxy = socks5://127.0.0.1:1080</div><div class="line"># HTTP:</div><div class="line">#   proxy = http://127.0.0.1:8080</div><div class="line">#   proxy = http://user:password@127.0.0.1:8080</div><div class="line"># shadowsocks:</div><div class="line">#   proxy = ss://encrypt_method:password@1.2.3.4:8388</div><div class="line">#   支持的加密方法如下：</div><div class="line">#     aes-128-cfb, aes-192-cfb, aes-256-cfb,</div><div class="line">#     bf-cfb, cast5-cfb, des-cfb, rc4-md5,</div><div class="line">#     chacha20, salsa20, rc4, table</div></pre></td></tr></table></figure></p>
<p>以上是我的配置文件，当跑起该服务后，将会在4411端口开放一个http代理服务。</p>
<h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><p>手机端的设置，首先保证手机和linux在同一局域网，而且要注意防火墙不要拦截该端口，主要是针对linux。<br>手机可以在编辑WiFil里面的最下面，找到<code>HTTP代理</code>，设置为<code>手动</code>，填入你的linux的局域网ip地址和端口号。<br>不需要开启鉴定。</p>
<h3 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h3><p>就愉快的玩耍吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾这个的原因是因为在IOS下没有支持&lt;code&gt;kcptun&lt;/code&gt;加速的ss客户端，而且我这个穷屌丝，买不起可以刷固件的路由器。&lt;br&gt;所以就只有想办法把linux系统中的ss共享到局域网，IOS可以局域网的代理进行加速。实现躺在床上高速看&lt;code&gt;youtube&lt;/code&gt;的效果。&lt;br&gt;因为&lt;code&gt;windows&lt;/code&gt;的ss客户端已经自带的允许来自局域网的连接的功能，然而Linux的ss却没有此功能。&lt;br&gt;所有只有另寻它径，在网上查找资料就找到了一个名为&lt;code&gt;meow&lt;/code&gt;代理工具，可以讲sock5代理转为http代理。&lt;br&gt;
    
    </summary>
    
    
      <category term="kcptun" scheme="https://liaobinbin.com/tags/kcptun/"/>
    
      <category term="shadowsocks" scheme="https://liaobinbin.com/tags/shadowsocks/"/>
    
      <category term="ios" scheme="https://liaobinbin.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Linux用Kcptun和SS进行上网加速</title>
    <link href="https://liaobinbin.com/2017/03/10/linux-use-keptun-and-shadowsocks.html"/>
    <id>https://liaobinbin.com/2017/03/10/linux-use-keptun-and-shadowsocks.html</id>
    <published>2017-03-09T19:04:18.000Z</published>
    <updated>2017-06-27T15:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>针对使用linux桌面版的用户和基于linux路由器的用户。</p>
</blockquote>
<h2 id="第一步：下载Kcptun可执行文件。"><a href="#第一步：下载Kcptun可执行文件。" class="headerlink" title="第一步：下载Kcptun可执行文件。"></a>第一步：下载Kcptun可执行文件。</h2><p><a href="https://github.com/xtaci/kcptun/releases" target="_blank" rel="external">Kcptun下载地址</a><br>需要根据自己系统版本选择相应的软件版本进行下载，因为我的主机是64位的，所以我下载的是<a href="https://github.com/xtaci/kcptun/releases/download/v20170218/kcptun-linux-amd64-20170218.tar.gz" target="_blank" rel="external">kcptun-linux-amd64-20170218.tar.gz</a><br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzf  kcptun-linux-amd64-20170218.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压后你将会得到两个文件，一个是<code>server_linux_amd64</code>，另外一个是<code>client_linux_amd64</code>。作为客户端，我们当然应该使用<code>client_linux_amd64</code>。<br>执行下面的命令可以获取到帮助文档</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./client_linux_amd64 -h</div></pre></td></tr></table></figure>
<p>为了方便进行参数的设置，我这里使用其中<code>-c</code>的选项，这个选项将会让kcptun运行的时候调用一个<code>json</code>文件，在<code>json</code>文件里面有我们提前写好的服务器参数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "localaddr": ":8388", //本地使用的端口</div><div class="line">    "remoteaddr": "********:29900", //服务器的kcptun服务的ip地址加端口</div><div class="line">    "key": "*****", //你设定的加密密码</div><div class="line">    "crypt": "aes", //加密方式</div><div class="line">    "mode": "fast2", //加速模式</div><div class="line">    "conn": 1, //从这以下的参数，你需要根据你在服务器端的配置参数进行设置</div><div class="line">    "autoexpire": 60,</div><div class="line">    "mtu": 1350,</div><div class="line">    "sndwnd": 1024,</div><div class="line">    "rcvwnd": 1024,</div><div class="line">    "datashard": 10,</div><div class="line">    "parityshard": 3,</div><div class="line">    "dscp": 0,</div><div class="line">    "nocomp": false,</div><div class="line">    "acknodelay": false,</div><div class="line">    "nodelay": 0,</div><div class="line">    "interval": 20,</div><div class="line">    "resend": 2,</div><div class="line">    "nc": 1,</div><div class="line">    "sockbuf": 4194304,</div><div class="line">    "keepalive": 10</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我讲这个文件保存为<code>myvps.json</code><br>在终端执行下面的命令就可以运行kcptun服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./client_linux_amd64 -c myvps.json </div><div class="line"><span class="comment">#我是把该`json`文件存放在相同的路径下，如不同，则需要完整路径。</span></div></pre></td></tr></table></figure>
<h2 id="第二步，关于ss的设置"><a href="#第二步，关于ss的设置" class="headerlink" title="第二步，关于ss的设置"></a>第二步，关于ss的设置</h2><p>执行完第一步的操作以后，在你的电脑或者是你的路由器就已经跑起了kcptun服务并且运行在”8388”端口上。<br>你需要把你的ss客户端配置文件进行修改，把原来的远程服务器IP地址改为<code>127.0.0.1</code>，并且修改原来的SS服务端口为<code>8388</code>，而SS里面的加密方式和密码还有SS服务器的本地端口则不需要修改。</p>
<p>这样关于你浏览器的插件设置将不需要修改便可直接使用。<br>但是得到网速将会是以前很多倍。</p>
<h2 id="完结，优化"><a href="#完结，优化" class="headerlink" title="完结，优化"></a>完结，优化</h2><h3 id="将SS用于命令行"><a href="#将SS用于命令行" class="headerlink" title="将SS用于命令行"></a>将SS用于命令行</h3><p>你需要用到一个工具室<code>proxychains</code><br>在配置文件的最后一行加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socks5 127.0.0.1 1080</div></pre></td></tr></table></figure>
<p>这样可以使你的git等命令也可以走代理的路线，大大的提高了从<code>github</code>下载速度。其他需要下载国外资源的命令也可以使用。</p>
<p>命令用法：就在原有的命令的最前面加上<code>proxychains</code> <em>注意命令后面需要接一个空格</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains git <span class="built_in">clone</span> git://xxxxxxxxx</div></pre></td></tr></table></figure>
<h3 id="开机自启动kcptun"><a href="#开机自启动kcptun" class="headerlink" title="开机自启动kcptun"></a>开机自启动kcptun</h3><p>我把自动启动的命令添加了加载图形界面后，实际上加入到系统自启会更好,所以我在我的<code>.xinitrc</code>中添加了以下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( ( sleep 2 &amp;amp;&amp;amp; /home/bob/Downloads/client_linux_amd64 -c /home/bob/Downloads/myvps.json ) &amp;amp; )</div></pre></td></tr></table></figure></p>
<p>其中路径应该修改为你自己的文件的绝对路径。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>撒花撒花撒花撒花撒花撒花撒花撒花撒花撒花撒花撒花撒花撒花！！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;针对使用linux桌面版的用户和基于linux路由器的用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第一步：下载Kcptun可执行文件。&quot;&gt;&lt;a href=&quot;#第一步：下载Kcptun可执行文件。&quot; class=&quot;headerlink&quot; title=&quot;第一步：下载Kcptun可执行文件。&quot;&gt;&lt;/a&gt;第一步：下载Kcptun可执行文件。&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xtaci/kcptun/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kcptun下载地址&lt;/a&gt;&lt;br&gt;需要根据自己系统版本选择相应的软件版本进行下载，因为我的主机是64位的，所以我下载的是&lt;a href=&quot;https://github.com/xtaci/kcptun/releases/download/v20170218/kcptun-linux-amd64-20170218.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kcptun-linux-amd64-20170218.tar.gz&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://liaobinbin.com/tags/linux/"/>
    
      <category term="kcptun" scheme="https://liaobinbin.com/tags/kcptun/"/>
    
      <category term="shadowsocks" scheme="https://liaobinbin.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Linux VPS 搭建tomcat 6 基于centos 7</title>
    <link href="https://liaobinbin.com/2016/07/24/install-tomcat6-to-centos7.html"/>
    <id>https://liaobinbin.com/2016/07/24/install-tomcat6-to-centos7.html</id>
    <published>2016-07-23T18:54:24.000Z</published>
    <updated>2017-06-13T19:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>因为部门老大的需要，所以部门老大让我在公司的服务器上面搭建一个linux 服务器。并且安装<code>tomcat 6</code>.其原因不详，我猜可能是他接的外水吧。</p>
</blockquote>
<a id="more"></a>
<h1 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h1><h2 id="创建一个虚拟机"><a href="#创建一个虚拟机" class="headerlink" title="创建一个虚拟机"></a>创建一个虚拟机</h2><p>　　公司是一台VPS主服务器，里面的虚拟机采用<code>Hyper-v</code>的软件来开通VPS，首先是类似<code>VMware</code>一样创建的一台空虚拟机，这里的配置使用的是双核，1GB内存，40GB磁盘。<br>　　内存启用了<code>Hyper-v</code>的动态内存，启动内存为1024MB，最小内存为512M，最大内存为1024MB，压缩比为百分之20。</p>
<h3 id="下载centos7镜像文件"><a href="#下载centos7镜像文件" class="headerlink" title="下载centos7镜像文件"></a>下载centos7镜像文件</h3><p>　　在<a href="https://www.centos.org/" target="_blank" rel="external">centos的官网</a>直接通过谷歌浏览器下载，速度很快，10MB每秒。因为公司的服务器本身是一个美国VPS宿主机。<br>　　我选择下载的<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1511.iso" target="_blank" rel="external">CentOS-7-x86_64-Minimal-1511.iso</a>。</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>　　1. 编辑该虚拟机的配置，使其的光驱设置为刚才下载的iso文件。<br>　　2. 启动虚拟机，并且使用Hyper-v连接到该虚拟机。<br>　　3. 进入引导界面，选择第一步，开始安装。<br>　　4. 等待加载图形界面<br>　　5. 配置需要安装的磁盘和安全性、时区、语言等参数<br>　　6. 点击开始安装，会在完成安装后要求你设置root密码和新建用户（可以选择不新建用户）。<br>　　7. 我新建一个叫做bob的用户，并且将该用户设置为系统管理员。<br>　　8. 完成安装，系统重启。</p>
<h2 id="配置Linux"><a href="#配置Linux" class="headerlink" title="配置Linux"></a>配置Linux</h2><h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><p>　　进入系统后，第一个设置是修改网卡配置。<br>　　因为该服务器是需要接入互联网的，所以使用的是一个独立IP，通过编辑ifcfg-eth0可以实现静态网络连接。而且这里因为是最小化安装，所以很多的编辑器自带是没有安装的，能够使用的是<code>VI</code>。而且我使用的是bob身份登陆的。不是root身份还需要使用sudo命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure></p>
<p>　　修改如下内容：</p>
<h1 id="其他已经存在的参数不需要删除"><a href="#其他已经存在的参数不需要删除" class="headerlink" title="其他已经存在的参数不需要删除"></a>其他已经存在的参数不需要删除</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BOOTPROTO=<span class="string">"static"</span> <span class="comment">#dhcp改为static   </span></div><div class="line">ONBOOT=<span class="string">"yes"</span> <span class="comment">#开机启用本配置  </span></div><div class="line">IPADDR=XXX.XXX.XXX.XXX <span class="comment">#静态IP  </span></div><div class="line">GATEWAY=XXX.XXX.XXX.XXX <span class="comment">#默认网关  </span></div><div class="line">NETMASK=255.255.255.248 <span class="comment">#子网掩码  </span></div><div class="line">DNS1=8.8.8.8 <span class="comment">#DNS 配置  </span></div><div class="line">DNS2=8.8.4.4</div></pre></td></tr></table></figure>
<p>保存文件后重启网络服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service network restart</div></pre></td></tr></table></figure></p>
<h1 id="或者用"><a href="#或者用" class="headerlink" title="或者用"></a>或者用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart network.serivce</div></pre></td></tr></table></figure>
<p>使用<code>ip addr</code>查看效果。</p>
<h3 id="更新软件仓库和系统"><a href="#更新软件仓库和系统" class="headerlink" title="更新软件仓库和系统"></a>更新软件仓库和系统</h3><p>　　这个使用的是一个很简单的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum update</div></pre></td></tr></table></figure></p>
<p>　　等待系统更新完成。这时候通过<code>Hyper-v</code>生成一个快照，以免后面的错误操作方便可以随时还原。</p>
<h1 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat　　"></a>安装tomcat　　</h1><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><p>　　最小化安装centos是没有包含任何jdk存在的，包括openjdk也是没有的，所以这里可以直接去官网下载最新的Jdk.</p>
<h3 id="安装Wget"><a href="#安装Wget" class="headerlink" title="安装Wget"></a>安装Wget</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install wget</div></pre></td></tr></table></figure>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>　　在浏览器中找到jdk的官网和正确的版本下载地址，这里选用的是 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">Java SE Development Kit 8u101</a>,找到<code>jdk-8u101-linux-x64.rpm</code>复制其下载地址，使用以下命令下载到centos中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-linux-x64.rpm</div></pre></td></tr></table></figure></p>
<p>　　下载完成后，使用rpm开始安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rpm -ivh jdk-8u101-linux-x64.rpm</div></pre></td></tr></table></figure></p>
<h2 id="安装tomcat6"><a href="#安装tomcat6" class="headerlink" title="安装tomcat6"></a>安装tomcat6</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-6/v6.0.45/bin/apache-tomcat-6.0.45.tar.gz</div></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>　　首先解压到当前目录，使用<code>tar</code>命令解压到下载的目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf apache-tomcat-6.0.45.tar.gz</div></pre></td></tr></table></figure></p>
<p>　　然后移动到根目录下，这使用root权限移动到跟目录，并且重命名为tomcat6。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv apache-tomcat-6.0.45 /tomcat6</div></pre></td></tr></table></figure></p>
<h2 id="启动tomcat6"><a href="#启动tomcat6" class="headerlink" title="启动tomcat6"></a>启动tomcat6</h2><p>　　启动tomcat6比较容易，直接移动到tomcat目录下的Bin文件夹。里面有启动脚本，使用普通用户权限执行即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /tomcat6/bin</div><div class="line">./startup</div></pre></td></tr></table></figure></p>
<p>　　这时候应该可以看到提示成功运行的信息。</p>
<h2 id="访问tomcat6"><a href="#访问tomcat6" class="headerlink" title="访问tomcat6"></a>访问tomcat6</h2><p>　　访问tomcat6默认的端口是8080。使用<code>XXX.XXX.XXX.XXX:8080</code>就可以看到访问效果了。不需要关闭<code>iptables</code>。</p>
<h1 id="安装完成后。"><a href="#安装完成后。" class="headerlink" title="安装完成后。"></a>安装完成后。</h1><p>　　啥也不会，也不会写jsp代码。发现没什么卵用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为部门老大的需要，所以部门老大让我在公司的服务器上面搭建一个linux 服务器。并且安装&lt;code&gt;tomcat 6&lt;/code&gt;.其原因不详，我猜可能是他接的外水吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://liaobinbin.com/tags/linux/"/>
    
      <category term="tomact" scheme="https://liaobinbin.com/tags/tomact/"/>
    
      <category term="centos" scheme="https://liaobinbin.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo使用七牛图床</title>
    <link href="https://liaobinbin.com/2016/07/14/hexo-use-qiniu-image.html"/>
    <id>https://liaobinbin.com/2016/07/14/hexo-use-qiniu-image.html</id>
    <published>2016-07-13T18:50:33.000Z</published>
    <updated>2017-06-13T18:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>因为hexo的博客静态网页文件是在本地生成，对于图片附件的支持不是很好，本来是用的官方的一个插件，但是那个插件在我使用固定连接后会有一个文件夹的问题存在，我没有时间去捣鼓，就去找了别的图床工具。</p>
</blockquote>
<a id="more"></a>
<h3 id="说说"><a href="#说说" class="headerlink" title="说说"></a>说说</h3><p>IPic<br>　　这个工具在MAC下还是真的不错。<br>　　以下是官方使用的截图：<br><img src="http://7xs9lb.com1.z0.glb.clouddn.com/16-7-14/92334554.jpg" alt="官方使用截图"><br>　　普通用户只可以使用免费版，只支持微博免费图床，我下载了上传了几个图片都失败了，因为苹果账号没有绑定付款信息，所以我没有去升级付费版，一年25元人民币，算是很便宜的，还是值得退款的，支持多种方式去上传，有兴趣的同学可以自己去他官网查看详细的介绍。这里我就不多说了，因为没有使用。<br><img src="http://7xs9lb.com1.z0.glb.clouddn.com/16-7-14/96536054.jpg" alt="ipic免费版"></p>
<h3 id="极简图床"><a href="#极简图床" class="headerlink" title="极简图床"></a>极简图床</h3><p>　　这个说的简单一点就是一个网页上传工具。不过提供的chrome插件，相当于一个书签，可以快速访问该网站而已。<br>　　比较好的一点就是可以直接绑定七牛账号，上传后自动保存到自己的七牛云存储空间，那真的极好的。<br>　　网页截图：<br><img src="http://7xs9lb.com1.z0.glb.clouddn.com/16-7-14/29365503.jpg" alt="网页主界面"><br>　　上传后可以直接复制markdown的代码，这对于hexo的插入图片附件是极好的。<br><img src="http://7xs9lb.com1.z0.glb.clouddn.com/16-7-14/9976607.jpg" alt="效果如图"></p>
<p>　　以上为个人使用观点，不带任何吹黑性质，适合自己使用的就好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为hexo的博客静态网页文件是在本地生成，对于图片附件的支持不是很好，本来是用的官方的一个插件，但是那个插件在我使用固定连接后会有一个文件夹的问题存在，我没有时间去捣鼓，就去找了别的图床工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://liaobinbin.com/tags/hexo/"/>
    
      <category term="图床" scheme="https://liaobinbin.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="七牛" scheme="https://liaobinbin.com/tags/%E4%B8%83%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>将常用系统迁移到MAC</title>
    <link href="https://liaobinbin.com/2016/04/15/change-my-always-OS-to-OSX-MAC.html"/>
    <id>https://liaobinbin.com/2016/04/15/change-my-always-OS-to-OSX-MAC.html</id>
    <published>2016-04-14T18:45:43.000Z</published>
    <updated>2017-06-13T18:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>宁静以致远，厚薄而积发</p>
</blockquote>
<a id="more"></a>
<h2 id="Windows常用软件列表"><a href="#Windows常用软件列表" class="headerlink" title="Windows常用软件列表"></a>Windows常用软件列表</h2><ul>
<li>winrar(每次安装系统都必装的，因为有些程序需要解压缩，没一个好的解压软件真的不行)</li>
<li>chrome(互联网的世界没有他怎么能行？三系统全用着，谷歌全家桶)</li>
<li>diskgenius(难免会有操作磁盘之类的东东，用来修改U盘的一些引导参数也好用)</li>
</ul>
<h2 id="Linux常用软件列表"><a href="#Linux常用软件列表" class="headerlink" title="Linux常用软件列表"></a>Linux常用软件列表</h2><ul>
<li>VIM</li>
<li>xfce</li>
<li>zsh</li>
<li>awesome</li>
<li>i3wm</li>
<li>emacs</li>
<li>mpd</li>
</ul>
<h2 id="Mac下常用软件列表"><a href="#Mac下常用软件列表" class="headerlink" title="Mac下常用软件列表"></a>Mac下常用软件列表</h2><ul>
<li>VIM</li>
<li>Xcode</li>
<li>eclipse</li>
<li>IDEA</li>
<li>Dash</li>
<li>zsh</li>
<li>oh-my-zsh</li>
<li>Iterm</li>
<li>Alfred</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;宁静以致远，厚薄而积发&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://liaobinbin.com/tags/mac/"/>
    
      <category term="linux" scheme="https://liaobinbin.com/tags/linux/"/>
    
      <category term="windows" scheme="https://liaobinbin.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>部署HEXO同时发布到github和coding</title>
    <link href="https://liaobinbin.com/2016/04/14/deploy-hexo-to-github-and-coding.html"/>
    <id>https://liaobinbin.com/2016/04/14/deploy-hexo-to-github-and-coding.html</id>
    <published>2016-04-13T18:41:00.000Z</published>
    <updated>2017-06-13T18:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　其实一开始我的网站是部署在我公司的服务器上的，不过由于公司的香港服务器的机房停止了对大陆的接入线路，导致访问的时候会先到美国转一圈才能访问主机，还不如使用美国服务器了。<br><a id="more"></a><br>　　刚好在网上爬帖的时候，看到了一个把hexo部署到github和coding的<a href="http://www.jianshu.com/p/7ad9d3cd4d6e" target="_blank" rel="external">教程</a>，我之前的hexo都单独放过github和gitcafe。所以操作什么的都很轻松，重点是看到他使用dnspod的CNAME转发，分别让国内的用户访问coding源国外的用户访问github源，所以我觉得这样是非常好的。<br>　　于是我也折腾了一下，把Hexo跑了起来，不过就是这两个都不能像独立空间那样，可以使用自己的SSL证书，于是我刚申请的三年免费的沃通SSL证书就不知道何去何从了。<br>　　不过说真的，其实我不知道写什么，我估计是因为自己肚子里面没有什么墨水吧:) 词穷—。=</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　其实一开始我的网站是部署在我公司的服务器上的，不过由于公司的香港服务器的机房停止了对大陆的接入线路，导致访问的时候会先到美国转一圈才能访问主机，还不如使用美国服务器了。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://liaobinbin.com/tags/hexo/"/>
    
      <category term="coding" scheme="https://liaobinbin.com/tags/coding/"/>
    
      <category term="github" scheme="https://liaobinbin.com/tags/github/"/>
    
  </entry>
  
</feed>
